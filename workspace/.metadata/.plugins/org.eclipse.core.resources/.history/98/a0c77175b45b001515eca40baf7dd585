#include "cpu1_uc.h"

void irq_gen_isr(void* data) {
	fpga_core* ptr = (fpga_core*)data;
	// clear interrupt
	Xil_Out32(ptr->Config.BaseAddress, 0);
	XIntc_Acknowledge(&m_axi_intc,XPAR_AXI_INTC_0_IRQ_GEN_0_IRQ_INTR);
	static int count=0;
	OSSemPost(semPacketReady);
	xil_printf("IRQ GEM : irq cleared %d\n", count++);
}

void timer_isr(void* not_valid) {
	if (private_timer_irq_triggered()) {
		private_timer_clear_irq();
		OSTimeTick();
	}                           
}

void fit_timer_isr(void *not_valid) {
	static int cnt = 0;
	XIntc_Acknowledge(&m_axi_intc,XPAR_AXI_INTC_0_FIT_TIMER_0_INTERRUPT_INTR);
	cnt++;
	if(cnt == 5)
	{
		xil_printf("FIT TIMER : 5eme TICK %d\n");
		OSSemPost(semStartVerif);
		cnt = 0;
	}

}

///////////////////////////////////////////////////////////////////////////////////////
//								uC/OS-II part
///////////////////////////////////////////////////////////////////////////////////////
int main() {


	// Initialize uC/OS-II
	OSInit();

	create_application();

	initialize_bsp();

	xil_printf("*** Starting uC/OS-II scheduler ***\n");


	OSStart();

	cleanup();
	
    return 0;
}

void create_application() {
	int error;

	error = create_tasks();
	if (error != 0)
		xil_printf("Error %d while creating tasks\n", error);

	error = create_events();
	if (error != 0)
		xil_printf("Error %d while creating events\n", error);
}

int create_tasks() {
    OSTaskCreate(TaskComputing, (void *)0, &TaskComputeStk[TASK_STK_SIZE-1], (INT8U)TASK_COMPUTING_PRIO);
    OSTaskCreate(TaskPrint, (void *)&print_param1, &TaskPrint1Stk[TASK_STK_SIZE-1], (INT8U)TASK_PRINT1_PRIO);
    OSTaskCreate(TaskPrint, (void *)&print_param2, &TaskPrint2Stk[TASK_STK_SIZE-1], (INT8U)TASK_PRINT2_PRIO);
    OSTaskCreate(TaskPrint, (void *)&print_param3, &TaskPrint3Stk[TASK_STK_SIZE-1], (INT8U)TASK_PRINT3_PRIO);
    OSTaskCreate(TaskForwarding, (void *)0, &TaskForwardingStk[TASK_STK_SIZE-1], (INT8U)TASK_FORWARDING_PRIO);
    OSTaskCreate(TaskReceivePacket, (void *)0, &TaskReceiveStk[TASK_STK_SIZE-1], (INT8U)TASK_RECEIVE_PRIO);
    OSTaskCreate(TaskVerification, (void *)0, &TaskVerificationStk[TASK_STK_SIZE-1], (INT8U)TASK_VERIFICATION_PRIO);
	return 0;
}

int create_events() {
	/*CREATION DES FILES*/

	inputQ = OSQCreate(inputMsg, 16);
	verifQ = OSQCreate(verifMsg, 10);
	lowQ = OSQCreate(lowMsg, 4);
	mediumQ = OSQCreate(mediumMsg, 4);
	highQ = OSQCreate(highMsg, 4);

	/*CREATION DES MAILBOXES*/

	Mbox1 = OSMboxCreate(NULL);
	Mbox2 = OSMboxCreate(NULL);
	Mbox3 = OSMboxCreate(NULL);

	/*ALLOCATION ET DEFINITIONS DES STRUCTURES PRINT_PARAM*/

	print_param1.Mbox = Mbox1;
	print_param1.interfaceID = 1;

	print_param2.Mbox = Mbox2;
	print_param2.interfaceID = 2;

	print_param3.Mbox = Mbox3;
	print_param3.interfaceID = 3;


	/*CREATION DES SEMAPHORES*/

	semPacketReady = OSSemCreate(0);
	semStartVerif = OSSemCreate(0);


	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////
//								uC/OS-II part
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
//									TASKS
///////////////////////////////////////////////////////////////////////////////////////


/*
 *********************************************************************************************************
 *                                              computeCRC
   -Calcule la check value d'un paquet en utilisant un CRC (cyclic redudancy check)
 *********************************************************************************************************
 */
unsigned int computeCRC(INT16U* w, int nleft) {
    unsigned int sum = 0;
    INT16U answer = 0;

    // Adding words of 16 bits
    while (nleft > 1) {
        sum += *w++;
        nleft -= 2;
    }

    // Handling the last byte
    if (nleft == 1) {
        *(unsigned char *) (&answer) = *(const unsigned char *) w;
        sum += answer;
    }

    // Handling overflow
    sum = (sum & 0xffff) + (sum >> 16);
    sum += (sum >> 16);

    answer = ~sum;
    return (unsigned int) answer;
}

/*
 *********************************************************************************************************
 *                                              TaskreceivePacket
 *  -Injecte des paquets dans la InputQ lorsqu'il en recoit de linux
 *********************************************************************************************************
 */
void TaskReceivePacket(void *data) {
    int i, k;
    INT8U err;

    // Initialization of the rand function
    srand(4600);
    Packet *packet;

    i = 0;
    for (;;) {
    	xil_printf("RECEIVE : waiting for a packet from linux\n");
    	OSSemPend(semPacketReady,0,&err);
		packet = malloc(sizeof(Packet));

		unsigned long *ll;
		ll = (unsigned long *) packet;
		for(k = 0; k < 16; k++)
		{
			while(!COMM_RX_FLAG);	//wait for linux to write a value
		    *ll++ = COMM_RX_DATA; // next part of the packet
			COMM_RX_FLAG = 0;
		}


		xil_printf("RECEIVE : ********Reception du Paquet # %d ******** \n", i++);
		xil_printf("ADD %x \n", packet);
		xil_printf("    ** src : %x \n", packet->src);
		xil_printf("    ** dst : %x \n", packet->dst);
		xil_printf("    ** type : %d \n", packet->type);
		xil_printf("    ** crc : %x \n", packet->crc);

		err = OSQPost(inputQ,  packet);

		if (err == OS_ERR_Q_FULL) {
			xil_printf("RECEIVE: Paquet rejete a l'entree car la fifo est pleine !\n");
			free(packet);
		}
    }
}


/*
 *********************************************************************************************************
 *                                              TaskVerification
 *  -Réinjecte les paquets rejetés des files haute, medium et basse dans la inputQ
 *********************************************************************************************************
 */
void TaskVerification(void *data) {
	INT8U err;
	Packet *packet = NULL;
	while(1) {
		OSSemPend(semStartVerif,0,&err);
		err_msg("VERIF OSSemPend",err);
		packet = OSQAccept(verifQ, &err);
		if(err == 31) {
			xil_printf("TaskVerification  : Pas de paquet dans la file\n");
		}
		else
		{
			while(1) {
				xil_printf("VERIF : IL Y A DES MESSAGES DANS LA FILE\n");
				err = OSQPost(inputQ, packet);
				if(err == OS_ERR_Q_FULL) {
					xil_printf("TaskVerification  : La file d'entrée est pleine. Destruction du paquet\n");
					free(packet);
				}
				err_msg("VERIF OSQAccept1",err);
				packet = OSQAccept(verifQ, &err);
				err_msg("VERIF OSQAccept2", err);
				if(err == OS_ERR_Q_EMPTY)
					break;

			}
		}
	}
}

/*
 *********************************************************************************************************
 *                                              TaskComputing
 *  -Vérifie si les paquets sont conformes (CRC,Adresse Source)
 *  -Dispatche les paquets dans des files (HIGH,MEDIUM,LOxmd
 *
 *********************************************************************************************************
 */
void TaskComputing(void *pdata) {
    INT8U err;
    Packet *packet = NULL;
    while(1){

    	xil_printf("Computing : waiting for a packet from inject\n");
        packet = OSQPend(inputQ, 0,&err);
        err_msg("COMPUTING OSQPEND",err);
        xil_printf("Computing : Traitement du paquet\n");
        /*Verification de l'espace d'addressage*/
        if ((packet->src > REJECT_LOW1 && packet->src < REJECT_HIGH1) ||
            (packet->src > REJECT_LOW2 && packet->src < REJECT_HIGH2) ||
            (packet->src > REJECT_LOW3 && packet->src < REJECT_HIGH3) ||
            (packet->src > REJECT_LOW4 && packet->src < REJECT_HIGH4)) {
            xil_printf("\n--TaskComputing: Source invalide (Paquet rejete) (total : %d)\n\n", ++nbPacketSourceRejete);
            free(packet);
        }

        else {
            /*Verification du CRC*/
            if (computeCRC((INT16U*) (packet), 64)) {
                 xil_printf("\n--TaskComputing: CRC invalide (Paquet rejete) (total : %d)\n", ++nbPacketCRCRejete);
            } else {
                /*Dispatche les paquets selon leur type*/
                switch (packet->type) {
                case 1:
                	err = OSQPost(highQ, packet);
                    if (err == OS_ERR_Q_FULL) {
                    	err = OSQPost(verifQ, packet);
                    	if (err != OS_ERR_NONE) {
                    		//si l'on recontre une errreur, on rejette définitivement le paquet
                    		xil_printf("\n--TaskComputing: high to verif ERR %d (Paquet rejete) (total : %d) !\n", err, ++nbPacketHighRejete);
                    		free(packet);
                    	}
                    }
                break;
                case 2:
                    if(OSQPost(mediumQ,&packet) != OS_ERR_NONE) {
                    	if ((err = OSQPost(verifQ, packet)) != OS_ERR_NONE) {
							//si l'on recontre une errreur, on rejette définitivement le paquet
							xil_printf("\n--TaskComputing: medium to verif ERR %d (Paquet rejete) (total : %d) !\n", err, ++nbPacketHighRejete);
							free(packet);
                    	}
                    }
                break;
                case 3:
                    if(OSQPost(lowQ, packet) != OS_ERR_NONE) {
                    	if ((err = OSQPost(verifQ, packet)) != OS_ERR_NONE) {
                    		//si l'on recontre une errreur, on rejette définitivement le paquet
                    		xil_printf("\n--TaskComputing: low to verif ERR %d (Paquet rejete) (total : %d) !\n", err, ++nbPacketHighRejete);
                    		free(packet);
                    	}
                    }
                break;

                }
            }
        }
    }
}
/*
 *********************************************************************************************************
 *                                              Fonction Dispatch
 *  -Envoie le paquet passé en paramètre vers la mailbox correspondante à son adressage destination
 *********************************************************************************************************
 */
 void dispatch (Packet* packet){
     INT8U err;
     /*Delai correspondant à la recherche dans une table de routage*/
     OSTimeDlyHMSM(0,0,4,0);


    /* Test sur la destination du paquet */

    if(packet->dst >= INT1_LOW && packet->dst <= INT1_HIGH ){
        err = OSMboxPost(Mbox1,&packet);
    }
    if(packet->dst >= INT2_LOW && packet->dst <= INT2_HIGH ){
        err = OSMboxPost(Mbox2,&packet);
    }
    if(packet->dst >= INT3_LOW && packet->dst <= INT3_HIGH ){
        err = OSMboxPost(Mbox3,&packet);
    }
    if(err == OS_ERR_MBOX_FULL){
        /*Destruction du paquet si la mailbox de destination est pleine*/
        xil_printf("\n--TaskForwarding: Erreur mailbox full\n\n");
        free(packet);
    }
 }
/*
 *********************************************************************************************************
 *                                              TaskForwarding1
 *  -traite la priorité des paquets : si un paquet de haute priorité est prêt,
 *   on l'envoie à l'aide de la fonction dispatch, sinon on regarde les paquets de moins haute priorité
 *********************************************************************************************************
 */
void TaskForwarding(void *pdata) {
    INT8U err;
    Packet *packet = NULL;

    while(1){
        /* Si paquet vidéo prêt */
    	packet = OSQAccept(highQ,&err);
        if(err == OS_ERR_NONE){
            /* Envoi du paquet */
            dispatch(packet);
            xil_printf("\n--TaskForwarding1: %d paquets envoyes\n\n", ++nbPacket);
        }else{
            /* Si paquet audio prêt */
        	packet = OSQAccept(mediumQ,&err);
        	if(err == OS_ERR_NONE){
                /* Envoi du paquet */
                dispatch(packet);
                xil_printf("\n--TaskForwarding1: %d paquets envoyes\n\n", ++nbPacket);
            }else{
                /* Si paquet autre prêt */
            	packet = OSQAccept(lowQ,&err);
            	if(err == OS_ERR_NONE){
                    /* Envoi du paquet */
                    dispatch(packet);
                    xil_printf("\n--TaskForwarding1: %d paquets envoyes\n\n", ++nbPacket);
                }
            }
        }
    }
}


/*
 *********************************************************************************************************
 *                                              TaskPrint
 *  -Affiche les infos des paquets arrivés à destination et libere la mémoire allouée
 *********************************************************************************************************
 */
void TaskPrint(void *data) {
    INT8U err;
    Packet *packet = NULL;
    int intID = ((PRINT_PARAM*)data)->interfaceID;
    OS_EVENT* mb = ((PRINT_PARAM*)data)->Mbox;


    while(1){
        /*Attente d'un paquet*/
    	xil_printf("Print %d : waiting for a packet from inject\n",intID);
        packet = OSMboxPend(mb,0,&err);
        err_msg("PRINT : MBoxPend",err);
        /*impression des infos du paquets*/
        xil_printf("\nPaquet recu en %d \n", intID);
        xil_printf("    >> src : %x \n", packet->src);
        xil_printf("    >> dst : %x \n", packet->dst);
        xil_printf("    >> type : %d \n", packet->type);

        /*Libération de la mémoire*/
    }

}
void err_msg(char* entete, INT8U err)
{
	if(err != 0)
	{
		xil_printf(entete);
		xil_printf(": Une erreur est retournée : code %d \n",err);
	}
}

